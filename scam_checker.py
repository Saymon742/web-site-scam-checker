import requests
import whois
from bs4 import BeautifulSoup
import re
import time
from datetime import datetime
import ssl
import socket
from urllib.parse import urlparse

class AdvancedScamReporter:
    def __init__(self):
        self.scam_patterns = [
            r'–∫—Ä–∏–ø—Ç–æ.*–∏–Ω–≤–µ—Å—Ç', r'–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π.*–¥–æ—Ö–æ–¥', r'–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è.*–ø—Ä–∏–±—ã–ª—å', 
            r'100%.*–∑–∞—Ä–∞–±–æ—Ç–æ–∫', r'–±—ã—Å—Ç—Ä(—ã–π|–∞—è).*–¥–µ–Ω—å–≥–∏', r'–ø–∞—Å—Å–∏–≤–Ω(—ã–π|–∞—è).*–¥–æ—Ö–æ–¥',
            r'–≤–ª–æ–∂–∏.*–ø–æ–ª—É—á–∏', r'—Å–µ–∫—Ä–µ—Ç–Ω(—ã–π|–∞—è).*–º–µ—Ç–æ–¥', r'—ç–∫—Å–∫–ª—é–∑–∏–≤–Ω(—ã–π|–∞—è).*–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ',
            r'—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è.*–±–æ–Ω—É—Å', r'(–∫—É–ø–∏|–ø–æ–∫—É–ø–∞–π).*(—Å–µ–π—á–∞—Å|–¥–µ—à–µ–≤–æ)', r'–∞–∫—Ü–∏—è.*—Ç–æ–ª—å–∫–æ.*—Å–µ–≥–æ–¥–Ω—è',
            r'–∑–∞—Ä–∞–±–æ—Ç–æ–∫.*(–≤ –¥–µ–Ω—å|–≤ –Ω–µ–¥–µ–ª—é)', r'(–∏–Ω–≤–µ—Å—Ç|–≤–∫–ª–∞–¥).*(–ø–æ–¥.*–ø—Ä–æ—Ü–µ–Ω—Ç)', r'–±–µ–∑.*—Ä–∏—Å–∫',
            r'–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω(—ã–π|–∞—è).*—Å—Ö–µ–º', r'—Ç–∞–π–Ω—ã–π.*—Å–ø–æ—Å–æ–±', r'–ª–µ–≥–∫(–∏–π|–∞—è).*–¥–µ–Ω—å–≥–∏'
        ]
        
        self.contact_patterns = [
            r'8\d{10}', r'\+7\d{10}', r'\b\d{3}[-.]?\d{3}[-.]?\d{4}\b',
            r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
        ]
        
        self.virus_total_api_key = "e8817f7355fd30d1c8b95522e3cfac2d5fa9b8407fcf21dadc264b72d5c25c90"
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'x-apikey': self.virus_total_api_key
        }

    def print_progress(self, message, delay=0.2):
        print(f"üîÑ {message}")
        time.sleep(delay)

    def print_success(self, message):
        print(f"‚úÖ {message}")

    def print_warning(self, message):
        print(f"‚ö†Ô∏è  {message}")

    def print_error(self, message):
        print(f"‚ùå {message}")

    def print_critical(self, message):
        print(f"üö® {message}")

    def analyze_website(self, url):
        results = {}
        
        try:
            parsed_url = urlparse(url)
            domain = parsed_url.netloc
            
            self.print_progress("–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞...")
            response = requests.get(url, timeout=15, headers=self.headers, allow_redirects=True)
            response.raise_for_status()
            self.print_success("–°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            
            final_url = response.url
            content = response.text.lower()
            
            results['content_analysis'] = self._analyze_content(content)
            self.print_success("–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")
            
            results['contacts'] = self._find_contacts(content)
            self.print_success("–ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
            
            results['domain_info'] = self._analyze_domain(domain)
            self.print_success("–ê–Ω–∞–ª–∏–∑ –¥–æ–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")
            
            results['ssl_info'] = self._check_ssl(domain)
            self.print_success("–ü—Ä–æ–≤–µ—Ä–∫–∞ SSL –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
            self.print_progress("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–π—Ç —á–µ—Ä–µ–∑ VirusTotal...")
            results['virus_total'] = self._check_virus_total(domain)
            self.print_success("–ü—Ä–æ–≤–µ—Ä–∫–∞ VirusTotal –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
            results['redirect_info'] = self._analyze_redirects(url, final_url)
            
            results['risk_assessment'] = self._assess_risk(results)
            self.print_success("–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
            results['final_verdict'] = self._get_final_verdict(results['risk_assessment'])
            
            return results
            
        except requests.RequestException as e:
            self.print_error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∞–π—Ç—É: {e}")
            return {'error': f'–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {e}'}
        except Exception as e:
            self.print_error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return {'error': str(e)}

    def _analyze_content(self, content):
        soup = BeautifulSoup(content, 'html.parser')
        
        for script in soup(["script", "style", "meta", "link"]):
            script.decompose()
        
        text = soup.get_text()
        text = re.sub(r'\s+', ' ', text).strip()
        
        scam_indicators = 0
        detected_patterns = []
        
        for pattern in self.scam_patterns:
            matches = re.findall(pattern, text, re.IGNORECASE)
            if matches:
                scam_indicators += len(matches)
                detected_patterns.extend([pattern] * len(matches))
        
        return {
            'scam_indicators_count': scam_indicators,
            'detected_patterns': list(set(detected_patterns)),
            'has_urgent_calls': bool(re.search(r'—Å—Ä–æ—á–Ω–æ|–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ|–ø–æ—Å–ª–µ–¥–Ω(–∏–π|—è—è)|—É—Å–ø–µ–π', text, re.IGNORECASE)),
            'has_guarantees': bool(re.search(r'–≥–∞—Ä–∞–Ω—Ç–∏—è|–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω|100%|–≤–µ—Ä–Ω–µ–º.*–¥–µ–Ω—å–≥–∏', text, re.IGNORECASE)),
            'has_crypto_mentions': bool(re.search(r'–±–∏—Ç–∫–æ–∏–Ω|–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç|blockchain|—ç—Ñ–∏—Ä–∏—É–º', text, re.IGNORECASE)),
            'has_free_offers': bool(re.search(r'–±–µ—Å–ø–ª–∞—Ç–Ω–æ|–¥–∞—Ä–æ–º|–ø–æ–¥–∞—Ä–æ–∫|–±–æ–Ω—É—Å', text, re.IGNORECASE)),
            'text_length': len(text),
            'unique_words': len(set(text.split()))
        }

    def _find_contacts(self, content):
        contacts = {'phones': [], 'emails': [], 'social_media': []}
        
        phone_matches = re.findall(r'8\d{10}|\+7\d{10}|\b\d{3}[-.]?\d{3}[-.]?\d{4}\b', content)
        contacts['phones'] = list(set(phone_matches))
        
        email_matches = re.findall(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b', content, re.IGNORECASE)
        contacts['emails'] = list(set(email_matches))
        
        social_matches = re.findall(r'(vk\.com|telegram|t\.me|whatsapp|instagram)', content, re.IGNORECASE)
        contacts['social_media'] = list(set(social_matches))
        
        return contacts

    def _analyze_domain(self, domain):
        try:
            domain_info = whois.whois(domain)
            
            creation_date = domain_info.creation_date
            expiration_date = domain_info.expiration_date
            
            if creation_date:
                if isinstance(creation_date, list):
                    creation_date = creation_date[0]
                domain_age = (datetime.now() - creation_date).days
            else:
                domain_age = None
            
            if expiration_date:
                if isinstance(expiration_date, list):
                    expiration_date = expiration_date[0]
                days_until_expiry = (expiration_date - datetime.now()).days
            else:
                days_until_expiry = None
            
            return {
                'domain_name': domain_info.domain_name,
                'creation_date': creation_date,
                'expiration_date': expiration_date,
                'domain_age_days': domain_age,
                'days_until_expiry': days_until_expiry,
                'registrar': domain_info.registrar,
                'country': domain_info.country,
                'name_servers': domain_info.name_servers
            }
        except Exception as e:
            return {'error': f'–û—à–∏–±–∫–∞ whois: {str(e)}'}

    def _check_ssl(self, domain):
        try:
            context = ssl.create_default_context()
            with socket.create_connection((domain, 443), timeout=10) as sock:
                with context.wrap_socket(sock, server_hostname=domain) as ssock:
                    cert = ssock.getpeercert()
                    cert_expires = datetime.strptime(cert['notAfter'], '%b %d %H:%M:%S %Y %Z')
                    days_until_ssl_expiry = (cert_expires - datetime.now()).days
            
            return {
                'has_ssl': True,
                'ssl_valid': True,
                'ssl_days_until_expiry': days_until_ssl_expiry
            }
        except Exception:
            return {'has_ssl': False, 'ssl_valid': False}

    def _check_virus_total(self, domain):
        try:
            if not self.virus_total_api_key or self.virus_total_api_key == "YOUR_ACTUAL_API_KEY_HERE":
                return {'error': 'API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_ACTUAL_API_KEY_HERE –Ω–∞ –≤–∞—à –∫–ª—é—á VirusTotal'}
            
            url = f'https://www.virustotal.com/api/v3/domains/{domain}'
            response = requests.get(url, headers=self.headers, timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                stats = data['data']['attributes']['last_analysis_stats']
                
                return {
                    'malicious': stats['malicious'],
                    'suspicious': stats['suspicious'],
                    'harmless': stats['harmless'],
                    'undetected': stats['undetected'],
                    'total_engines': sum(stats.values()),
                    'reputation': data['data']['attributes'].get('reputation', 0),
                    'categories': data['data']['attributes'].get('categories', {})
                }
            elif response.status_code == 404:
                return {'error': '–î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ VirusTotal'}
            else:
                return {'error': f'–û—à–∏–±–∫–∞ API: {response.status_code}'}
                
        except Exception as e:
            return {'error': f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ VirusTotal: {str(e)}'}

    def _analyze_redirects(self, original_url, final_url):
        return {
            'original_url': original_url,
            'final_url': final_url,
            'redirected': original_url != final_url,
            'redirect_count': len(requests.get(original_url, headers=self.headers, timeout=10, allow_redirects=True).history)
        }

    def _assess_risk(self, results):
        risk_score = 0
        warnings = []
        
        content = results.get('content_analysis', {})
        risk_score += content.get('scam_indicators_count', 0) * 3
        
        if content.get('has_urgent_calls'):
            risk_score += 4
            warnings.append("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å—Ä–æ—á–Ω—ã–µ –ø—Ä–∏–∑—ã–≤—ã –∫ –¥–µ–π—Å—Ç–≤–∏—é")
        if content.get('has_guarantees'):
            risk_score += 3
            warnings.append("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≥–∞—Ä–∞–Ω—Ç–∏–∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏")
        if content.get('has_free_offers'):
            risk_score += 2
            warnings.append("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è '–±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö' —É—Å–ª—É–≥")
        
        domain = results.get('domain_info', {})
        if domain.get('domain_age_days') and domain['domain_age_days'] < 30:
            risk_score += 5
            warnings.append("–î–æ–º–µ–Ω —Å–æ–∑–¥–∞–Ω –Ω–µ–¥–∞–≤–Ω–æ (–º–µ–Ω–µ–µ 30 –¥–Ω–µ–π)")
        if domain.get('days_until_expiry') and domain['days_until_expiry'] < 30:
            risk_score += 3
            warnings.append("–î–æ–º–µ–Ω —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç (–º–µ–Ω–µ–µ 30 –¥–Ω–µ–π)")
        
        ssl_info = results.get('ssl_info', {})
        if not ssl_info.get('has_ssl'):
            risk_score += 4
            warnings.append("SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        elif ssl_info.get('ssl_days_until_expiry') and ssl_info['ssl_days_until_expiry'] < 30:
            risk_score += 2
            warnings.append("SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç")
        
        vt_data = results.get('virus_total', {})
        if vt_data.get('malicious', 0) > 0:
            risk_score += vt_data['malicious'] * 5
            warnings.append(f"VirusTotal –æ–±–Ω–∞—Ä—É–∂–∏–ª {vt_data['malicious']} —É–≥—Ä–æ–∑")
        if vt_data.get('suspicious', 0) > 0:
            risk_score += vt_data['suspicious'] * 3
            warnings.append(f"VirusTotal –æ–±–Ω–∞—Ä—É–∂–∏–ª {vt_data['suspicious']} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞—Ç—É—Ä")
        
        redirects = results.get('redirect_info', {})
        if redirects.get('redirected'):
            risk_score += 2
            warnings.append("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã")
        
        return {
            'risk_score': risk_score,
            'warnings': warnings,
            'factors_considered': len(warnings)
        }

    def _get_final_verdict(self, risk_assessment):
        risk_score = risk_assessment['risk_score']
        
        if risk_score >= 20:
            return {
                'verdict': 'üö® –û–ß–ï–ù–¨ –û–ü–ê–°–ù–´–ô –°–ê–ô–¢',
                'description': '–í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞! –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –≤–≤–æ–¥–∏—Ç–µ –∑–¥–µ—Å—å –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–µ —Å–æ–≤–µ—Ä—à–∞–π—Ç–µ –ø–ª–∞—Ç–µ–∂–∏.',
                'color': 'red',
                'risk_level': 'CRITICAL'
            }
        elif risk_score >= 15:
            return {
                'verdict': '‚ö†Ô∏è –û–ü–ê–°–ù–´–ô –°–ê–ô–¢',
                'description': '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –º–Ω–æ–≥–æ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞. –ë—É–¥—å—Ç–µ –∫—Ä–∞–π–Ω–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã.',
                'color': 'orange',
                'risk_level': 'HIGH'
            }
        elif risk_score >= 10:
            return {
                'verdict': 'üî∏ –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–û –û–ü–ê–°–ù–´–ô –°–ê–ô–¢',
                'description': '–ï—Å—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ—è–≤–∏—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å.',
                'color': 'yellow',
                'risk_level': 'MEDIUM'
            }
        elif risk_score >= 5:
            return {
                'verdict': 'üîπ –ú–ê–õ–û–†–ò–°–ö–û–í–ê–ù–ù–´–ô –°–ê–ô–¢',
                'description': '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏, –Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–º.',
                'color': 'blue',
                'risk_level': 'LOW'
            }
        else:
            return {
                'verdict': '‚úÖ –ù–ï –û–ü–ê–°–ù–´–ô –°–ê–ô–¢',
                'description': '–°–∞–π—Ç –≤—ã–≥–ª—è–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ. –†–∏—Å–∫–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã.',
                'color': 'green',
                'risk_level': 'SAFE'
            }

    def generate_report(self, url, results):
        print("\n" + "="*70)
        print("üîç –ü–†–û–î–í–ò–ù–£–¢–´–ô –û–¢–ß–ï–¢ –û–ë –ê–ù–ê–õ–ò–ó–ï –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
        print("="*70)
        
        print(f"\nüåê –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π —Å–∞–π—Ç: {url}")
        print(f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        if 'error' in results:
            print(f"\n‚ùå –û—à–∏–±–∫–∞: {results['error']}")
            return
        
        verdict = results['final_verdict']
        risk = results['risk_assessment']
        
        print(f"\n{'='*50}")
        print(f"üèÅ –ò–¢–û–ì–û–í–´–ô –í–ï–†–î–ò–ö–¢: {verdict['verdict']}")
        print(f"{'='*50}")
        print(f"üìù {verdict['description']}")
        print(f"üìä –°—É–º–º–∞—Ä–Ω—ã–π –±–∞–ª–ª —Ä–∏—Å–∫–∞: {risk['risk_score']}")
        print(f"üîç –£—á—Ç–µ–Ω–æ —Ñ–∞–∫—Ç–æ—Ä–æ–≤: {risk['factors_considered']}")
        print(f"{'='*50}")
        
        if risk['warnings']:
            print("\nüö® –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
            for warning in risk['warnings']:
                print(f"   ‚Ä¢ {warning}")
        
        domain = results['domain_info']
        if 'error' not in domain:
            print(f"\nüîç –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –î–û–ú–ï–ù–ï:")
            print(f"   ‚Ä¢ –î–æ–º–µ–Ω: {domain.get('domain_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"   ‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {domain.get('registrar', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"   ‚Ä¢ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {domain.get('creation_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            if domain.get('domain_age_days'):
                print(f"   ‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç –¥–æ–º–µ–Ω–∞: {domain['domain_age_days']} –¥–Ω–µ–π")
        
        vt_data = results.get('virus_total', {})
        if 'error' not in vt_data:
            print(f"\nüõ°Ô∏è  VIRUSTOTAL –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
            print(f"   ‚Ä¢ –í—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–µ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã: {vt_data.get('malicious', 0)}")
            print(f"   ‚Ä¢ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã: {vt_data.get('suspicious', 0)}")
            print(f"   ‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã: {vt_data.get('harmless', 0)}")
        else:
            print(f"\n‚ùå VirusTotal: {vt_data['error']}")
        
        ssl_info = results.get('ssl_info', {})
        print(f"\nüîê SSL-–°–ï–†–¢–ò–§–ò–ö–ê–¢: {'‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' if ssl_info.get('has_ssl') else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
        
        content = results['content_analysis']
        print(f"\nüìù –ê–ù–ê–õ–ò–ó –ö–û–ù–¢–ï–ù–¢–ê:")
        print(f"   ‚Ä¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞: {content['scam_indicators_count']}")
        
        print(f"\n{'='*70}")
        
        if verdict['risk_level'] in ['CRITICAL', 'HIGH']:
            print("\nüö® –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print("   ‚Ä¢ –ù–ï –≤–≤–æ–¥–∏—Ç–µ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            print("   ‚Ä¢ –ù–ï —Å–æ–≤–µ—Ä—à–∞–π—Ç–µ –ø–ª–∞—Ç–µ–∂–∏")
            print("   ‚Ä¢ –ù–ï —Å–∫–∞—á–∏–≤–∞–π—Ç–µ —Ñ–∞–π–ª—ã")
            print("   ‚Ä¢ –ó–∞–∫—Ä–æ–π—Ç–µ —Å–∞–π—Ç –∏ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å")
        
        print(f"\nüí° –î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ—Å–µ—Ç–∏—Ç–µ:")
        print(f"   https://www.virustotal.com/gui/domain/{urlparse(url).netloc}")

def main():
    print("üîç –ü–†–û–î–í–ò–ù–£–¢–´–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –°–ê–ô–¢–û–í")
    print("="*65)
    print("‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ VirusTotal API")
    print("="*65)
    
    url = input("–í–≤–µ–¥–∏—Ç–µ URL —Å–∞–π—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: ").strip()
    
    if not url.startswith(('http://', 'https://')):
        url = 'https://' + url
    
    print(f"\n–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∞–π—Ç–∞: {url}")
    print("–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...\n")
    
    reporter = AdvancedScamReporter()
    results = reporter.analyze_website(url)
    reporter.generate_report(url, results)

if __name__ == "__main__":
    main()
    input()