class RiskAssessor:
    def assess(self, results):
        risk_score = 0
        warnings = []
        
        content = results.get('content_analysis', {})
        risk_score += content.get('scam_indicators_count', 0) * 3
        
        if content.get('has_urgent_calls'):
            risk_score += 4
            warnings.append("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å—Ä–æ—á–Ω—ã–µ –ø—Ä–∏–∑—ã–≤—ã –∫ –¥–µ–π—Å—Ç–≤–∏—é")
        if content.get('has_guarantees'):
            risk_score += 3
            warnings.append("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≥–∞—Ä–∞–Ω—Ç–∏–∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏")
        if content.get('has_free_offers'):
            risk_score += 2
            warnings.append("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è '–±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö' —É—Å–ª—É–≥")
        
        domain = results.get('domain_info', {})
        if domain.get('domain_age_days') and domain['domain_age_days'] < 30:
            risk_score += 5
            warnings.append("–î–æ–º–µ–Ω —Å–æ–∑–¥–∞–Ω –Ω–µ–¥–∞–≤–Ω–æ (–º–µ–Ω–µ–µ 30 –¥–Ω–µ–π)")
        if domain.get('days_until_expiry') and domain['days_until_expiry'] < 30:
            risk_score += 3
            warnings.append("–î–æ–º–µ–Ω —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç (–º–µ–Ω–µ–µ 30 –¥–Ω–µ–π)")
        
        ssl_info = results.get('ssl_info', {})
        if not ssl_info.get('has_ssl'):
            risk_score += 4
            warnings.append("SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        elif ssl_info.get('ssl_days_until_expiry') and ssl_info['ssl_days_until_expiry'] < 30:
            risk_score += 2
            warnings.append("SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç")
        
        vt_data = results.get('virus_total', {})
        if vt_data.get('malicious', 0) > 0:
            risk_score += vt_data['malicious'] * 5
            warnings.append(f"VirusTotal –æ–±–Ω–∞—Ä—É–∂–∏–ª {vt_data['malicious']} —É–≥—Ä–æ–∑")
        if vt_data.get('suspicious', 0) > 0:
            risk_score += vt_data['suspicious'] * 3
            warnings.append(f"VirusTotal –æ–±–Ω–∞—Ä—É–∂–∏–ª {vt_data['suspicious']} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞—Ç—É—Ä")
        
        redirects = results.get('redirect_info', {})
        if redirects.get('redirected'):
            risk_score += 2
            warnings.append("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã")
        
        return {
            'risk_score': risk_score,
            'warnings': warnings,
            'factors_considered': len(warnings)
        }

    def get_final_verdict(self, risk_assessment):
        risk_score = risk_assessment['risk_score']
        
        if risk_score >= 20:
            return {
                'verdict': 'üö® –û–ß–ï–ù–¨ –û–ü–ê–°–ù–´–ô –°–ê–ô–¢',
                'description': '–í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞!',
                'color': 'red',
                'risk_level': 'CRITICAL'
            }
        elif risk_score >= 15:
            return {
                'verdict': '‚ö†Ô∏è –û–ü–ê–°–ù–´–ô –°–ê–ô–¢',
                'description': '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –º–Ω–æ–≥–æ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞.',
                'color': 'orange',
                'risk_level': 'HIGH'
            }
        elif risk_score >= 10:
            return {
                'verdict': 'üî∏ –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–û –û–ü–ê–°–ù–´–ô –°–ê–ô–¢',
                'description': '–ï—Å—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏.',
                'color': 'yellow',
                'risk_level': 'MEDIUM'
            }
        elif risk_score >= 5:
            return {
                'verdict': 'üîπ –ú–ê–õ–û–†–ò–°–ö–û–í–ê–ù–ù–´–ô –°–ê–ô–¢',
                'description': '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏.',
                'color': 'blue',
                'risk_level': 'LOW'
            }
        else:
            return {
                'verdict': '‚úÖ –ù–ï –û–ü–ê–°–ù–´–ô –°–ê–ô–¢',
                'description': '–°–∞–π—Ç –≤—ã–≥–ª—è–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ.',
                'color': 'green',
                'risk_level': 'SAFE'
            }